{"version":3,"sources":["utils.js","sound.js"],"names":["hslToRgb","h","s","l","r","g","b","hue2rgb","p","q","t","Math","round","WIDTH","HEIGHT","canvas","document","querySelector","ctx","getContext","width","height","analyzer","bufferLength","handleError","err","console","log","getAudio","stream","navigator","mediaDevices","getUserMedia","audio","catch","audioCtx","AudioContext","createAnalyser","source","createMediaStreamSource","connect","fftSize","frequencyBinCount","timeData","Uint8Array","frequencyData","drawTimeData","drawFrequency","getByteTimeDomainData","clearRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","forEach","data","i","v","y","moveTo","lineTo","stroke","requestAnimationFrame","getByteFrequencyData","barWidth","amount","percent","barHeight","fillStyle","fillRect"],"mappings":"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","file":"sound.66e01127.js","sourceRoot":"..","sourcesContent":["export function hslToRgb(h, s, l) {\r\n  let r;\r\n  let g;\r\n  let b;\r\n\r\n  if (s == 0) {\r\n    r = g = b = l; // achromatic\r\n  } else {\r\n    const hue2rgb = function hue2rgb(p, q, t) {\r\n      if (t < 0) t += 1;\r\n      if (t > 1) t -= 1;\r\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n      if (t < 1 / 2) return q;\r\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n      return p;\r\n    };\r\n\r\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    const p = 2 * l - q;\r\n    r = hue2rgb(p, q, h + 1 / 3);\r\n    g = hue2rgb(p, q, h);\r\n    b = hue2rgb(p, q, h - 1 / 3);\r\n  }\r\n\r\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n}\r\n","import {hslToRgb} from \"./utils\";\r\n\r\nconst WIDTH = 1500;\r\nconst HEIGHT = 1500;\r\n\r\nconst canvas = document.querySelector('canvas');\r\nconst ctx = canvas.getContext('2d');\r\ncanvas.width = WIDTH;\r\ncanvas.height = HEIGHT;\r\nlet analyzer;\r\nlet bufferLength;\r\n\r\nfunction handleError(err) {\r\n  console.log(\"You must give access to your mic in order to proceed\");\r\n}\r\n\r\nasync function getAudio() {\r\n  const stream = await navigator.mediaDevices.getUserMedia({audio: true}).catch(handleError);const audioCtx = new AudioContext();\r\n  analyzer = audioCtx.createAnalyser();\r\n  const source = audioCtx.createMediaStreamSource(stream);\r\n  source.connect(analyzer);\r\n  // how much data should we collect\r\n  analyzer.fftSize = 2 ** 10; \r\n  // pull the data off the audio\r\n  // how many pieces of data are there\r\n  bufferLength = analyzer.frequencyBinCount;\r\n  \r\n  //create specific arrays to contain the data from the analyzer\r\n  const timeData = new Uint8Array(bufferLength);\r\n  const frequencyData = new Uint8Array(bufferLength);\r\n  drawTimeData(timeData);\r\n  drawFrequency(frequencyData);\r\n} \r\n\r\n\r\n\r\nfunction drawTimeData(timeData) {\r\n  // inject the time data into our timeData array\r\n  analyzer.getByteTimeDomainData(timeData);\r\n  //now that we have the data, let turn it into something visual\r\n  //clear the canvas on every frame\r\n  ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n  //setup some canvas drawing\r\n  ctx.lineWidth = 10;\r\n  ctx.strokeStyle = '#ffc600';\r\n  ctx.beginPath();\r\n  const sliceWidth = WIDTH / bufferLength;\r\n  let x = 0;\r\n  timeData.forEach((data, i) => {\r\n    const v = data / 128;\r\n    const y = (v * HEIGHT) / 2;\r\n    // draw our lines\r\n    if(i === 0) {\r\n      ctx.moveTo(x, y);\r\n    } else {\r\n      ctx.lineTo(x, y);\r\n    }\r\n    x += sliceWidth;\r\n  });\r\n\r\n  ctx.stroke();\r\n  // call itself as soon as possbile\r\n  requestAnimationFrame(() => drawTimeData(timeData));\r\n}\r\n\r\n\r\nfunction drawFrequency(frequencyData) {\r\n  // get the frequency data into the pre-created array\r\n  analyzer.getByteFrequencyData(frequencyData);\r\n  // figure out the bar width\r\n  const barWidth = (WIDTH / bufferLength) * 3;\r\n  let x = 0;\r\n  frequencyData.forEach(amount => {\r\n    // 0 to 255\r\n    const percent = amount / 255;\r\n    const [h, s, l] = [360 / (percent * 360) - 0.5, 0.9, 0.5];\r\n    const barHeight = (HEIGHT * percent) / 2;\r\n    //convert to colour to HSL todo\r\n    const [r, g, b] = hslToRgb(h, s, l);\r\n    console.log(r, g, b)\r\n    ctx.fillStyle = `rgb(${r},${g},${b})`;\r\n    ctx.fillRect(\r\n      x,\r\n      HEIGHT - barHeight,\r\n      barWidth,\r\n      barHeight\r\n      );\r\n      \r\n    x += barWidth + 2;\r\n  })\r\n\r\n  requestAnimationFrame(() => drawFrequency(frequencyData));\r\n\r\n\r\n}\r\ngetAudio();"]}